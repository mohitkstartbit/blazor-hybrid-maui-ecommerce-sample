@using Microsoft.AspNetCore.Components.Routing;
@inject ProductStore _productStore
@inject AuthenticationStateProvider _authProvider;
@inject NavigationManager _navigationManager

<style>
    .cart-product-img {
        max-width: 70px;
        height: auto;
        border-radius: 6px;
    }

    .quantity-controls button {
        width: 28px;
        height: 28px;
        font-size: 16px;
        padding: 0;
    }

    .cart-item {
        border-bottom: 1px solid #e0e0e0;
        background-color: #f9f9f9;
        border-radius: 6px;
    }

        .cart-item h6 {
            font-size: 1rem;
        }

        .cart-item small {
            font-size: 0.85rem;
        }

</style>

@if (cartlist.Count > 0)
{
    foreach (var item in cartlist)
    {
        <div class="cart-item row align-items-center mb-3 p-2 shadow-sm">
            <!-- Product Image -->
            <div class="col-3 col-md-2 text-center">
                <img src="@Helper.GetImage(item.ProductImage)" alt="@item.ProductName" class="img-fluid rounded cart-product-img" />
            </div>

            <!-- Product Details -->
            <div class="col-6 col-md-7">
                <h6 class="mb-1">@item.ProductName</h6>
                <small>Price: $@item.ListPrice</small><br />
                @* <small>Total: <strong>$@item.TotalPrice</strong></small> *@
                <small>Total: <strong>$@(item.ListPrice * item.Quantity)</strong></small>
            </div>

            <!-- Quantity Control -->
            <div class="col-3 col-md-3 text-center">
                <div class="quantity-controls d-flex justify-content-center align-items-center">
                    <button @onclick="args => DecreaseQuantity(item.Productid)" class="btn btn-outline-secondary btn-sm">-</button>
                    <span class="mx-2 small">@item.Quantity</span>
                    <button @onclick="args => IncreaseQuantity(item.Productid)" class="btn btn-outline-secondary btn-sm">+</button>
                </div>
            </div>
        </div>
    }

    <!-- Total Payable and Place Order Button -->
    <div class="row mt-4">
        <div class="col-12 text-center">
            <h6>Total Payable Amount: <span class="text-success">$@TotalPayableAmmount</span></h6>
            <button class="btn btn-sm btn-primary mt-2" @onclick="PlaceOrder">Place Order</button>
        </div>
    </div>
}
else
{
    <!-- Empty Cart Message -->
    <div class="d-flex justify-content-center align-items-center" style="min-height: 60vh;">
        <RadzenCard Style="text-align: center; padding: 2rem; max-width: 400px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);">
            <RadzenIcon Icon="remove_shopping_cart" Style="font-size: 48px; color: #dc3545; margin-bottom: 1rem;" />

            <h4 style="margin-bottom: 0.5rem;">Your cart is empty</h4>
            <p style="color: gray;">Oops! Looks like you haven’t added anything yet.</p>
            <RadzenButton Text="Continue Shopping" Icon="storefront" ButtonStyle="ButtonStyle.Primary" Style="margin-top: 1rem;" Click="@GotoHome" />
        </RadzenCard>
    </div>
}


@code {
    public int TotalPayableAmmount { get; set; } = 0;
    public int TotalPrice { get; set; } = 0;
    public List<Product> CartItems;
    public List<CartViewModel> cartlist = new List<CartViewModel>();
    public List<OrderViewModel> OrderedItems;
    [Inject]
    public IProductService productService { get; set; }
    [Inject]
    public IOrderService _orderService { get; set; }
    [Inject]
    public ICartService cartService { get; set; }
    string userId = "";
    protected override async void OnInitialized()
    {
        var asp = await _authProvider.GetAuthenticationStateAsync();
        if (asp.User.Identity.IsAuthenticated)
        {
            var id = asp.User.Claims.FirstOrDefault(s => s.Type == ClaimTypes.NameIdentifier);
            if (id != null)
            {
                userId = id.Value;
            }
        }
        var data = productService.GetCart().Where(s => s.UserId == userId).ToList();
        //  cartlist = data;

        //var ddf = await cartService.GetCartItems(userId);
        var dddf = await cartService.GetAllCartItems(userId);
        cartlist = dddf;
        @if(cartlist.Count() > 0)
        {
            CountTotalAmmount(true);
        }
        else
        {
            CountTotalAmmount(false);
        }
        @*  _productStore.CartNewList = productService.GetCart().ToList();*@
    }
    private async Task GotoHome()
    {
        _navigationManager.NavigateTo("/");
    }
    public void CountTotalAmmount(bool status)
    {
        TotalPayableAmmount = 0;
        TotalPayableAmmount = cartlist.Sum(s => s.ListPrice * s.Quantity);
        if (status)
        {
            OnInitialized();
        }
        StateHasChanged();
    }
    public void calculateTotalPrice(int price, int quantity)
    {
        TotalPrice = price * quantity;
    }
    public void PlaceOrder()
    {
        var items = new List<OrderItem>();

        foreach (var item in cartlist)
        {
            items.Add(new()
                {
                    product_id = item.Productid,
                    list_price = item.ListPrice,
                    quantity = item.Quantity
                });
        }
        _orderService.CreateOrder(new()
            {
                OrderItems = items,
                Orders = new()
                {
                    UserId = userId,
                    OrderStatus = 2
                }
            });

        productService.ClearCart(userId);

        _navigationManager.NavigateTo("AddAddress");
    }

    public void DecreaseQuantity(int ProductId)
    {
        //productService.DecreaseQuantity(ProductId, userId);
       // cartService.DecreaseQuantity(ProductId, userId);
        cartService.RemoveCartItem(ProductId, userId);
        CountTotalAmmount(true);
    }

    public void IncreaseQuantity(int ProductId)
    {
        //productService.IncreaseQuantity(ProductId, userId);
       //cartService.IncreaseQuantity(ProductId, userId);
        cartService.AddToCart(ProductId, userId);
        CountTotalAmmount(false);
    }
}


